% prepare_tables_mixed_models_space_knowledge.m
% 
% uses the output of
% pattern_similarity_no_outlier_trials_load_data_btwn_runs.R
% adds a column with known/unknown code for status of encoding when
% learning the items locations in the lab (pre-scan).
initialize_ABCDCon_MGS

ORIG_FILES = 0;
REMOVE_bad_QA_runs = 1;
ASHS_files = 0;

onsetFiles_root = 'E:\spatcon_hdz\data_p\onsetFiles\';
analMRIDir = 'E:\spatcon_hdz\data_p\analyzed_mri_mixed_items\';
if ORIG_FILES % Rhit_HC
    % generated by pattern_similarity_no_outlier_trials_load_data_btwn_runs.R
    summary_file1 = fullfile(analMRIDir, '\multivariate_sanityCheck','group_temporal_trial_patterns.csv');
    summary_file2 = fullfile(analMRIDir, '\multivariate_sanityCheck','group_spatial_trial_patterns.csv');
else % Rhit
    if ASHS_files
        % generated by pattern_similarity_no_outlier_trials_rhit_hci_load_data_btwn_runs_MGS.R
        summary_file1 = fullfile(analMRIDir, '\multivariate_sanityCheck','group_temporal_trial_patterns_rhit.csv');
        summary_file2 = fullfile(analMRIDir, '\multivariate_sanityCheck','group_spatial_trial_patterns_rhit.csv');
    else  % manual tracing
        summary_file1 = fullfile(analMRIDir, '\multivariate_sanityCheck','group_manual_ROI_temporal_trial_patterns_rhit.csv');
        summary_file2 = fullfile(analMRIDir, '\multivariate_sanityCheck','group_manual_ROI_spatial_trial_patterns_rhit.csv');
    end
end

group_temporal_trial_patterns = readtable(summary_file1,'Delimiter',',');
group_spatial_trial_patterns = readtable(summary_file2,'Delimiter',',');
alldata_table =  [ group_temporal_trial_patterns; group_spatial_trial_patterns ];

clear T    
for subj_i = 1:length(subjects)
    subj = subjects(subj_i);
    row_nums = find(ismember(alldata_table.subj,sprintf('s%03d',subj)));
    
    subj_table = alldata_table(row_nums,:);
    
    folderName = fullfile(onsetFiles_root, sprintf('s%03d',subj));
    try
        stimuliFile = fullfile(folderName,sprintf('stimuliRespList_s%03d.mat',subj));
        mm = matfile(stimuliFile);
        objectID = mm.objectID;
        REF_ID = mm.REF_ID;     
    catch
        warning('onset file not found')
    end
    
    item_names = unique([subj_table.col_name,subj_table.row_name]);
    knownLocList = {}; nearEntryDoorItemList = {}; nearPassageDoorItemList = {}; entryRoomList = {}; innerRoomList = {};
    matG_list = {}; matF_list = {}; missesList = {};
    
    rmv_name_ii= [];
    for ii = 1:length(item_names)
        string = item_names{ii};
        same_run = find(objectID(:,REF_ID.BlockID) == str2num(string(5:6)));
        same_trial = find(objectID(:,REF_ID.trialNum) == str2num(string(14:16)));
        item_n = same_trial(find(ismember(same_trial,same_run)));
        
        % removing runs with bad QA
        if (subj == 30 && objectID(item_n,REF_ID.BlockID) == 3) || ...
                (subj == 9 && objectID(item_n,REF_ID.BlockID) == 1)
            rmv_name_ii = [rmv_name_ii, ii];
        end
            
        LocInRoomRespBallPark(ii) = objectID(item_n,REF_ID.LocInRoomRespBallPark);
        RoomNum(ii) = objectID(item_n,REF_ID.room);
        houseNum(ii) = objectID(item_n,REF_ID.house);
        itemLocationInRoom(ii) = objectID(item_n,REF_ID.locationInRoom);
        mem_rhit(ii) = objectID(item_n,REF_ID.Rhit);
        
        if ismember(itemLocationInRoom(ii), [1:2,5:6]) && RoomNum(ii) == 1
            itemNearEntryDoor(ii) = true;
        else
            itemNearEntryDoor(ii) = false;
        end
        
        % Location near passage between rooms
        if ( itemLocationInRoom(ii) == 7 && RoomNum(ii) == 1 && houseNum(ii) == 1 ||...
             itemLocationInRoom(ii) == 3 && RoomNum(ii) == 2 && houseNum(ii) == 1 ||...
             itemLocationInRoom(ii) == 7 && RoomNum(ii) == 1 && houseNum(ii) == -1 ||...
             itemLocationInRoom(ii) == 2 && RoomNum(ii) == 2 && houseNum(ii) == -1 )
           
            itemNearPassageDoor(ii) = true;
        else
            itemNearPassageDoor(ii) = false;
        end
        
        
        if isnan(LocInRoomRespBallPark(ii))
            continue
        end
        if RoomNum(ii) == 1
            entryRoomList{end+1} = item_names{ii};
        end
        if RoomNum(ii) == 2
            innerRoomList{end+1} = item_names{ii};
        end
                
        if LocInRoomRespBallPark(ii)
            knownLocList{end+1} = item_names{ii};
        end
        if itemNearEntryDoor(ii)
            nearEntryDoorItemList{end+1} = item_names{ii};
        end
        if itemNearPassageDoor(ii)
            nearPassageDoorItemList{end+1} = item_names{ii};
        end
       
        if ~mem_rhit(ii)
            missesList{end+1} =  item_names{ii};
        end
    end
 
    if ~isempty(missesList)
        warning('misses included')
    end
    
    if REMOVE_bad_QA_runs && ~isempty(rmv_name_ii)
        for ii = rmv_name_ii
            row_num = find(ismember(subj_table.row_name,item_names{ii}));
            subj_table(row_num,:) = [];
            col_num = find(ismember(subj_table.col_name,item_names{ii}));
            subj_table(col_num,:) = [];
        end
    end
    
    entry_nums = find(ismember(subj_table.row_name,knownLocList) & ismember(subj_table.col_name,knownLocList));
    subj_table.condition1 = cell(length(subj_table.col_name),1);
    subj_table.condition1(entry_nums,:) = {'knownRoom'};
    rest_nums = find(~ismember(1:length(subj_table.col_name),entry_nums));
    subj_table.condition1(rest_nums,:) = {'unknownRoom'};
    
    % Add a column that signals location near 'front door'
    entry_nums = find(ismember(subj_table.row_name,nearEntryDoorItemList) & ismember(subj_table.col_name,nearEntryDoorItemList));
    subj_table.entryLoc = cell(length(subj_table.col_name),1);
    subj_table.entryLoc(entry_nums,:) = {'nearFrontDoor'};
    rest_nums = find(~ismember(1:length(subj_table.col_name),entry_nums));
    subj_table.entryLoc(rest_nums,:) = {'otherLoc'};

    % Add a column that signals location in entry-room
    entry_nums1 = find(ismember(subj_table.row_name,entryRoomList) & ismember(subj_table.col_name,entryRoomList));
    subj_table.entryRoom = cell(length(subj_table.col_name),1);
    subj_table.entryRoom(entry_nums1,:) = {'entryRoom'};
    entry_nums2 = find(ismember(subj_table.row_name,innerRoomList) & ismember(subj_table.col_name,innerRoomList));
    subj_table.entryRoom(entry_nums2,:) = {'innerRoom'};
    rest_nums = find(~ismember(1:length(subj_table.col_name),[entry_nums1',entry_nums2'] ));
    subj_table.entryRoom(rest_nums,:) = {'otherLoc'};

    % Add a column that signals location near 'passage door'
    entry_nums = find(ismember(subj_table.row_name,nearPassageDoorItemList) & ismember(subj_table.col_name,nearPassageDoorItemList));
    subj_table.passageLoc = cell(length(subj_table.col_name),1);
    subj_table.passageLoc(entry_nums,:) = {'nearPassageDoor'};
    rest_nums = find(~ismember(1:length(subj_table.col_name),entry_nums));
    subj_table.passageLoc(rest_nums,:) = {'otherLoc'};

    % Match the group to XXX code
    entry_nums1 = find( ismember(subj_table.row_name,nearEntryDoorItemList) & ismember(subj_table.col_name,nearEntryDoorItemList ) & ...
                        ~ismember(subj_table.condition,'sameVideo') );
    subj_table.groupG = cell(length(subj_table.col_name),1);
    subj_table.groupG(entry_nums1,:) = {'sameRoomLoc'};
    entry_nums2 = find(ismember(subj_table.row_name,entryRoomList) & ismember(subj_table.col_name,innerRoomList) &...
                        ~ismember(subj_table.condition,'sameVideo') );
    entry_nums3 = find(ismember(subj_table.row_name,innerRoomList) & ismember(subj_table.col_name,entryRoomList) &...
                        ~ismember(subj_table.condition,'sameVideo') );
    subj_table.groupG([entry_nums2',entry_nums3'],:) = {'diffRoomLoc'};
    rest_nums = find(~ismember(1:length(subj_table.col_name),[entry_nums1',entry_nums2',entry_nums3']));
    subj_table.groupG(rest_nums,:) = {'otherLoc'};
                
    
    if subj_i == 1
        T = subj_table;
    else
        T = [T ; subj_table];
    end
    
    clear subj_table
end

if ORIG_FILES
    filename = fullfile(analMRIDir, '\multivariate_sanityCheck','allData_spaceCond.csv');
    if REMOVE_bad_QA_runs
        filename = fullfile(analMRIDir, '\multivariate_sanityCheck','allData_spaceCond_QA_runs_rmv.csv');
    end
else
    if REMOVE_bad_QA_runs
        if ASHS_files
            filename = fullfile(analMRIDir, '\multivariate_sanityCheck','allData_spaceCond_Rhit_QA_runs_rmv.csv');
        else
           filename = fullfile(analMRIDir, '\multivariate_sanityCheck','allData_manual_ROI_spaceCond_Rhit_QA_runs_rmv.csv');
        end
    end
end

disp(filename)
writetable(T,filename)