% Generate behavioral panel for manuscript, demonstrating a
% favorable bias towards entry room during multiple phases of behavioral
% testing.

function gen_behav_stats_fig()


onsetFiles_root = 'E:\spatcon_hdz\data_p\onsetFiles\';
load(fullfile(onsetFiles_root,'subjectsEncodingRating.mat')); % generated by loadEncodingTesting.m
subjects = 1:30;
exclude_subjects = [3:5,15:17,22];
subjects = subjects(~ismember(subjects,exclude_subjects));

% subj_view - N subjects X M items, (x,y) = 1 if subject x viewed item y.
% learnedInd - indices of all possible learned items
% subj_incorrect, subj_correct - reflect correct/incorrect room choice in
% immediate testing after watching the video

newA4figure('behavStats_spatcon2');
Nviews = sum(subj_view,2);
N_subjView = Nviews(learnedInd);
inCorrectRoom = nansum(subj_incorrect(learnedInd,:),2);
correctRoom = nansum(subj_correct(learnedInd,:),2);
[n,c] = hist(inCorrectRoom, [0:4]);
% pie(n,[1,0,0,0,0],{'0','1','2','3','4'})
disp([num2str(100*n(1)/length(learnedInd)),'% items had 0 mistakes in room placement'])
disp([num2str(100*n(2)/length(learnedInd)),'% items had 1 mistakes in room placement'])
disp([num2str(100*n(3)/length(learnedInd)),'% items had 2 mistakes in room placement'])

% text(-4,1.5,{'number of subjects', 'mis-locating item'})

for subj_i = 1:size(subj_incorrect,2)
    learnedInd_subj = find(sum(subj_view(:,subj_i),2) > 0);
    learnedIndCorrect = learnedInd(nansum(subj_correct(learnedInd_subj,subj_i),2) >= 1);

    room_correct = room_GT(learnedIndCorrect);
    CR1_subj(subj_i) = 100*nansum(room_correct==1)/length(room_correct);
    CR2_subj(subj_i) = 100*nansum(room_correct==2)/length(room_correct);
    
    house_correct = houseType(learnedIndCorrect);
    CH1_subj(subj_i) = 100*nansum(house_correct==1)/length(house_correct);
    CH2_subj(subj_i) = 100*nansum(house_correct==-1)/length(house_correct); 
    
    % look at room-1 item subgroup - is the house memory elevated for this
    % group?
    room_identity_subj_ind = room_GT(learnedInd_subj);
    CH_for_R1(subj_i) = sum(allSubjectRating.postHoc_response_hc(learnedInd_subj(room_identity_subj_ind == 1),subj_i)); % there are 100 items so it's actually percentage too :)
    CH_for_R2(subj_i) = sum(allSubjectRating.postHoc_response_hc(learnedInd_subj(room_identity_subj_ind == 2),subj_i));
    
    CR_for_R1(subj_i) = sum(allSubjectRating.postHoc_response_rc(learnedInd_subj(room_identity_subj_ind == 1),subj_i));
    CR_for_R2(subj_i) = sum(allSubjectRating.postHoc_response_rc(learnedInd_subj(room_identity_subj_ind == 2),subj_i));
    
end

x_l = 0.12;
y_l = 0.2;
axes('position',[0.1 0.1 x_l y_l])
hold all
n_items_per_room = 100;
n_items_per_house = 100;

bb = bar([1,2],[nanmean(CR1_subj),nanmean(CR2_subj)]);
errorbar([1,2],[nanmean(CR1_subj),nanmean(CR2_subj)],[nanstd(CR1_subj),nanstd(CR2_subj)]/sqrt(n_items_per_room),'k.')
plot(get(gca,'xlim'),50*ones(1,2),'k--')
set(gca,'xtick',[1:2],'xticklabel',{'room1','room2'},'ylim',[0,70])
ylabel({'Percentage of correctly-','located items per room'})
[pval(1), h] = signrank(CR1_subj-CR2_subj);
if pval(1) < 0.05
    plot(1.5,max([nanmean(CR1_subj),nanmean(CR2_subj)])*1.1,'*k')
end

x_l = 0.12;
y_l = 0.2;
axes('position',[0.1 0.6 x_l y_l])
hold all
n_items_per_room = 100;
bb = bar([1,2],[nanmean(CH1_subj),nanmean(CH2_subj)]);
errorbar([1,2],[nanmean(CH1_subj),nanmean(CH2_subj)],[nanstd(CH1_subj),nanstd(CH2_subj)]/sqrt(n_items_per_house),'k.')
plot(get(gca,'xlim'),50*ones(1,2),'k--')
set(gca,'xtick',[1:2],'xticklabel',{'house1','house2'},'ylim',[0,100])
ylabel({'Percentage of correctly-','located items per house'})
[pval(2), h] = signrank(CH1_subj-CH2_subj);
if pval(2) < 0.05
    plot(1.5,max([nanmean(CH1_subj),nanmean(CH2_subj)])*1.2,'*k')
end

%% Another version - looks at mistakes

x_l = 0.12;
y_l = 0.2;
axes('position',[0.3 0.1 x_l y_l])
for subj_i = 1:size(subj_incorrect,2)
    subj = subjects(subj_i);
    learnedInd = find(subj_view(:,subj_i));
    
    R1_ind_per_subj_i = find(room_GT(learnedInd) == 1);
    R1_ind_per_subj = learnedInd(R1_ind_per_subj_i);
    
    R2_ind_per_subj_i = find(room_GT(learnedInd) == 2);
    R2_ind_per_subj = learnedInd(R2_ind_per_subj_i);
 
    percfRoom1Items_rhit(subj_i) = 100*nansum(ismember(R1_ind_per_subj,allSubjectRating.rhit_items{subj}))/length(allSubjectRating.rhit_items{subj});
    percfRoom2Items_rhit(subj_i) = 100*nansum(ismember(R2_ind_per_subj,allSubjectRating.rhit_items{subj}))/length(allSubjectRating.rhit_items{subj});

    percfDoorItems_rhit(subj_i) = 100*nansum(ismember(allSubjectRating.itemsNearFrontDoor{subj},allSubjectRating.rhit_items{subj}))/length(allSubjectRating.itemsNearFrontDoor{subj});
    learnedItems_other = learnedInd(~ismember(learnedInd,allSubjectRating.itemsNearFrontDoor{subj}));   
    percfOtherItems_rhit(subj_i) = 100*nansum(ismember(learnedItems_other,allSubjectRating.rhit_items{subj}))/length(learnedItems_other);
    percIDoorItems_rhit(subj_i) = 100*nansum(ismember(allSubjectRating.itemsNearInternalDoor{subj},allSubjectRating.rhit_items{subj}))/length(allSubjectRating.itemsNearInternalDoor{subj});    
    
    percfDoorItems_KE(subj_i) = 100*nansum(ismember(allSubjectRating.itemsNearFrontDoor{subj},allSubjectRating.BallParkLocItemNum{subj}))/length(allSubjectRating.itemsNearFrontDoor{subj});
    learnedItems_other = learnedInd(~ismember(learnedInd,allSubjectRating.itemsNearFrontDoor{subj}));   
    percfOtherItems_KE(subj_i) = 100*nansum(ismember(learnedItems_other,allSubjectRating.BallParkLocItemNum{subj}))/length(learnedItems_other);
    percIDoorItems_KE(subj_i) = 100*nansum(ismember(allSubjectRating.itemsNearInternalDoor{subj},allSubjectRating.BallParkLocItemNum{subj}))/length(allSubjectRating.itemsNearInternalDoor{subj});    

end
hold all
bb = bar([1,2],[nanmean(percfRoom1Items_rhit),nanmean(percfRoom2Items_rhit)]);
errorbar([1,2],[nanmean(percfRoom1Items_rhit),nanmean(percfRoom2Items_rhit)],[nanstd(percfRoom1Items_rhit),nanstd(percfRoom2Items_rhit)]/sqrt(size(percfOtherItems_rhit,2)),'k.')
hold all
plot(get(gca,'xlim'),50*ones(1,2),'k--')
set(gca,'xtick',[1:2],'xticklabel',{'room1','room2'},'ylim',[0 70])
ylabel([{'Recollection'}, {'in the scanner (%)'}])
[pval(3), h] = signrank(percfRoom1Items_rhit-percfRoom2Items_rhit);
if pval(3) < 0.05
    plot(1.5,max([nanmean(percfRoom1Items_rhit),nanmean(percfRoom1Items_rhit)])*1.1,'*k')
end
[pval(4), h] = signrank(percfDoorItems_KE,percfOtherItems_KE);



axes('position',[0.5 0.1 x_l y_l])
cmap = brewermap(23,'spectral');
hold all
markerSz = 20;
% scatter(CH_for_R2,CH_for_R1,markerSz,cmap,'filled') % colorful
scatter(CH_for_R2,CH_for_R1,markerSz,'k','filled') % black
[pval(5), h] = signrank(CH_for_R2,CH_for_R1);

plot([0 100], [0 100],'k')
axis([30 100 30 100])
set(gca,'XTick',[30 100],'YTick',[30 100])
xlabel([{'House is rememebered'},{'for internal room items (%)'}])
ylabel([{'House is rememebered'},{'for entry room items (%)'}])

axes('position',[0.7 0.1 x_l y_l])
cmap = brewermap(23,'spectral');
hold all
markerSz = 20;
% scatter(CR_for_R2,CR_for_R1,markerSz,cmap,'filled') % colorful
scatter(CR_for_R2,CR_for_R1,markerSz,'k','filled') % black
plot([0 100], [0 100],'k')
axis([10 100 10 100])
set(gca,'XTick',[10 100],'YTick',[10 100])
xlabel([{'Room is rememebered'},{'for internal room items (%)'}])
ylabel([{'Room is rememebered'},{'for entry room items (%)'}])

%% sup figure
figName = 'BehavStats';
fsz = 8;
f = figure('Name', figName,'NumberTitle','off');
% Some WYSIWYG options:
set(gcf,'DefaultAxesFontSize',fsz);
set(gcf,'DefaultAxesFontName','arial');
set(gcf,'PaperUnits','centimeters','PaperPosition',[0.2 0.2 19 24]); % this size is the maximal to fit on an A4 paper when printing to PDF
set(gcf,'PaperOrientation','portrait');
set(gcf,'Units','centimeters','Position', get(gcf,'paperPosition')+[1 1 0 0]);
colormap('jet');

y_sz = 0.18;
pos1 = [0.11,0.55,0.1,y_sz];
pos2 = [0.33,0.55,0.1,y_sz];
pos3 = [0.55,0.55,0.1,y_sz];
pos4 = [0.75,0.55,0.1,y_sz];
pos5 = [0.11 0.1 0.1 y_sz];
pos6 = [0.55 0.1 0.1 y_sz];
markerSz = 7;
cmap = brewermap(23,'spectral');

axes('position',pos2)
hold all
scatter(ones(1,length(allSubjectRating.Rhit(subjects)))+0.1*randn(1,length(allSubjectRating.Rhit(subjects))),...
    100*allSubjectRating.Rhit(subjects),markerSz,cmap)
% histogram(100*allSubjectRating.Rhit(subjects),bins,'Normalization' ,'probability')

ylabel('recognition hit in scanner (%)')
axis([0.5 1.5 0 100])
plot(get(gca,'xlim'),ones(1,2)*50, 'k--')
set(gca,'xtick',[])

axes('position',pos3)
hold all
scatter(ones(1,length(allSubjectRating.Rhit(subjects)))+0.1*randn(1,length(allSubjectRating.Rhit(subjects))),...
    100*allSubjectRating.HC(subjects),markerSz,cmap)
ylabel({'correct house identification', 'post scan (%)'})
axis([0.5 1.5 0 100])
plot(get(gca,'xlim'),ones(1,2)*50, 'k--')
set(gca,'xtick',[])

axes('position',pos4)
hold all
scatter(ones(1,length(allSubjectRating.Rhit(subjects)))+0.1*randn(1,length(allSubjectRating.Rhit(subjects))),...
    100*allSubjectRating.RC(subjects),markerSz,cmap)
ylabel({'correct room identification', 'post scan (%)'})
axis([0.5 1.5 0 100])
plot(get(gca,'xlim'),ones(1,2)*50, 'k--')
set(gca,'xtick',[])

axes('position',pos1)
hold all
scatter(ones(1,length(allSubjectRating.LocInRoomRespBallPark(subjects)))+0.1*randn(1,length(allSubjectRating.Rhit(subjects))),...
    100*allSubjectRating.LocInRoomRespBallPark(subjects),markerSz,cmap)
ylabel({'correct room identification', 'during encoding (%)'})
axis([0.5 1.5 0 100])
plot(get(gca,'xlim'),ones(1,2)*50, 'k--')
set(gca,'xtick',[])
    
    %%

PrintActiveFigs('E:\Dropbox\RanganathLab\spatcon_2\figures\LINKS\')

end